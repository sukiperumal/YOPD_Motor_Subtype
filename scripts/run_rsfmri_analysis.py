#!/usr/bin/env python3

"""
run_rsfmri_analysis.py

Master script to run the complete resting-state fMRI analysis pipeline for YOPD Motor Subtype project.
This script:
1. Sets up the environment and necessary directories
2. Runs the preprocessing pipeline for functional MRI data
3. Performs resting-state network analysis
4. Identifies subtype-specific network dysfunction patterns
5. Generates a final report

Usage:
python run_rsfmri_analysis.py [--skip-preprocessing]
"""

import os
import sys
import argparse
import logging
import time
import subprocess
from pathlib import Path
import pandas as pd
import matplotlib.pyplot as plt
from datetime import datetime

# Set up logging
timestamp = time.strftime("%Y%m%d_%H%M%S")
log_file = f"logs/rsfmri_master_{timestamp}.log"
os.makedirs("logs", exist_ok=True)

logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler(log_file),
        logging.StreamHandler(sys.stdout)
    ]
)
logger = logging.getLogger('rsfmri_master')

# Set up paths - Fix for Windows compatibility
PROJECT_DIR = Path("c:/Users/Pesankar/OneDrive/Documents/GitHub/YOPD_Motor_Subtype").resolve()
OUTPUT_DIR = PROJECT_DIR / "rsfmri_results"
PREPROCESSED_DIR = PROJECT_DIR / "fmri_processed"
SCRIPTS_DIR = PROJECT_DIR / "scripts"
REPORTS_DIR = OUTPUT_DIR / "reports"

# Create necessary directories
for directory in [OUTPUT_DIR, REPORTS_DIR]:
    directory.mkdir(exist_ok=True, parents=True)

def ensure_dependencies():
    """Check and install required Python dependencies"""
    logger.info("Checking and installing dependencies...")
    
    dependencies = [
        "numpy", "pandas", "matplotlib", "seaborn", "scipy", "nibabel",
        "scikit-learn", "nilearn", "nipype", "bids", "openpyxl"  # Added openpyxl for Excel reading
    ]
    
    # Install any missing dependencies
    for dep in dependencies:
        try:
            __import__(dep)
            logger.info(f"{dep} already installed")
        except ImportError:
            logger.info(f"Installing {dep}")
            subprocess.run([sys.executable, "-m", "pip", "install", dep], check=True)
    
    logger.info("All dependencies are installed")

def run_preprocessing(args):
    """Run the preprocessing pipeline for resting-state fMRI data"""
    if args.skip_preprocessing:
        logger.info("Skipping preprocessing as requested")
        
        # Check if any preprocessed data exists
        if not PREPROCESSED_DIR.exists() or not list(PREPROCESSED_DIR.glob('**/func_preprocessed.nii.gz')):
            logger.warning("No preprocessed data found! Cannot continue without preprocessed data.")
            logger.warning("Please run with preprocessing or ensure preprocessed data exists.")
            sys.exit(1)
        return
    
    logger.info("Starting fMRI preprocessing pipeline...")
    
    # Run the preprocessing script
    preproc_script = SCRIPTS_DIR / "preprocess_fmri.py"
    try:
        subprocess.run([sys.executable, str(preproc_script)], check=True)
        logger.info("Preprocessing completed successfully")
    except subprocess.CalledProcessError as e:
        logger.error(f"Preprocessing failed with error: {e}")
        sys.exit(1)

def run_analysis():
    """Run the resting-state analysis pipeline"""
    logger.info("Starting resting-state network analysis...")
    
    # Run the analysis script
    analysis_script = SCRIPTS_DIR / "resting_state_analysis.py"
    try:
        subprocess.run([sys.executable, str(analysis_script)], check=True)
        logger.info("Analysis completed successfully")
    except subprocess.CalledProcessError as e:
        logger.error(f"Analysis failed with error: {e}")
        sys.exit(1)

def generate_final_report():
    """Generate a comprehensive final report"""
    logger.info("Generating final comprehensive report...")
    
    report_path = REPORTS_DIR / "YOPD_Motor_Subtype_RS_fMRI_Report.md"
    
    # Check if summary report was generated by the analysis pipeline
    summary_report = PROJECT_DIR / "rs_results" / "summary_report.md"
    
    if not summary_report.exists():
        logger.warning("Summary report not found. Final report will be limited.")
    
    # Create the final report
    with open(report_path, 'w') as report:
        # Header
        report.write("# Resting-State fMRI Analysis of YOPD Motor Subtypes\n\n")
        report.write(f"**Generated on:** {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n\n")
        
        # Project description
        report.write("## Project Overview\n\n")
        report.write("This report summarizes the analysis of resting-state functional MRI data for Young-Onset Parkinson's Disease Motor Subtypes:\n\n")
        report.write("* **PIGD**: Postural Instability and Gait Difficulty subtype\n")
        report.write("* **TDPD**: Tremor Dominant subtype\n")
        report.write("* **HC**: Healthy Controls\n\n")
        
        # Hypotheses
        report.write("## Hypotheses\n\n")
        report.write("1. **PIGD**: Expected to show reduced connectivity in the frontostriatal circuit\n")
        report.write("2. **TDPD**: Expected to show hyperconnectivity in the cerebello-thalamo-cortical loop\n\n")
        
        # Methods
        report.write("## Methods\n\n")
        report.write("### Preprocessing Pipeline\n\n")
        report.write("1. Field map-based distortion correction using FUGUE\n")
        report.write("2. Motion correction using MCFLIRT\n")
        report.write("3. Registration to anatomical T1 image and then to MNI standard space\n")
        report.write("4. Spatial smoothing with FWHM=6mm\n")
        report.write("5. Temporal high-pass filtering (cutoff: 100s)\n\n")
        
        report.write("### Analysis Pipeline\n\n")
        report.write("1. Group Independent Component Analysis (ICA) with 20 components\n")
        report.write("2. Identification of networks of interest (frontostriatal and cerebello-thalamo-cortical)\n")
        report.write("3. Dual regression to obtain subject-specific network maps\n")
        report.write("4. Statistical comparison between groups (PIGD vs HC, TDPD vs HC, PIGD vs TDPD)\n\n")
        
        # Include content from summary report if it exists
        if summary_report.exists():
            with open(summary_report, 'r') as summary:
                # Skip the headers which we've already included in our own format
                content = summary.read()
                # Find where the "Overall Findings" section starts
                findings_idx = content.find("## Overall Findings")
                if findings_idx != -1:
                    report.write(content[findings_idx:])
                else:
                    report.write(content)
        
        # Conclusion
        report.write("\n\n## Conclusion\n\n")
        report.write("This analysis provides insights into the differential functional connectivity patterns between PIGD and TDPD motor subtypes of Young-Onset Parkinson's Disease. ")
        report.write("The results help clarify the neurobiological basis of clinical heterogeneity in PD and may guide future development of subtype-specific interventions.\n\n")
    
    logger.info(f"Final report generated at: {report_path}")
    return report_path

def main():
    """Main function to run the complete pipeline"""
    # Parse command line arguments
    parser = argparse.ArgumentParser(description="Run complete resting-state fMRI analysis for YOPD Motor Subtypes")
    parser.add_argument('--skip-preprocessing', action='store_true', help='Skip preprocessing and use existing preprocessed data')
    args = parser.parse_args()
    
    start_time = time.time()
    logger.info("Starting complete rsfMRI analysis pipeline")
    
    # Ensure all dependencies are installed
    ensure_dependencies()
    
    # Step 1: Run preprocessing
    run_preprocessing(args)
    
    # Step 2: Run analysis
    run_analysis()
    
    # Step 3: Generate final report
    final_report = generate_final_report()
    
    # Done!
    elapsed_time = time.time() - start_time
    hours, remainder = divmod(elapsed_time, 3600)
    minutes, seconds = divmod(remainder, 60)
    
    logger.info(f"Pipeline completed in {int(hours)}h {int(minutes)}m {int(seconds)}s")
    logger.info(f"Final report available at: {final_report}")
    
    print("\n" + "="*80)
    print(f"Pipeline successfully completed!")
    print(f"Final report: {final_report}")
    print("="*80 + "\n")

if __name__ == "__main__":
    main()